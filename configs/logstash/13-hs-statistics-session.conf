filter {
#

  # activity.log
  if [logname] == "activity" {
   
    # extract the timestamp from the message
    grok {
      match => {"message" => "%{TIMESTAMP_ISO8601:date_string}[ ,|]%{GREEDYDATA:log_message}"}
      tag_on_failure => ["_grokparsefailure"]
      tag_on_failure => ["activity-msg-grok-13"]
    }
    
    # convert the date strings into date objects
    date {
        match => [ "date_string", "yyyy-MM-dd HH:mm:ss.SSSSSSZZ"]
        target => "session_timestamp"
        tag_on_failure => ["_dateparsefailure"]
        tag_on_failure => ["date_string-13"]
    }
     
    # extract the key value pairs from the log_message
    # use the new kv separator "|"
    if "|" in  [log_message] {
      kv {
        source => "log_message"
        field_split => '|'
      }
    } 
    else {
      # use the old kv separator " "
      kv {
        source => "log_message"
      } 
    }
   
    mutate {
      convert => {
        "usr_id" => "integer"
        "session_id" => "integer"
      }
      remove_field => ["date_string"]
    }

   # resolve ip address
   if ([user_ip]) {

      geoip {
        source => [ "user_ip" ]
      }

      # The DNS plugin doesn't allow a "target" argument, so we have to copy the field unless we want to overwrite the ip
      mutate {
        add_field => { "client_host" => "%{user_ip}" }
      }

      dns {
        reverse => [ "client_host" ]
        action => "replace"
        hit_cache_size => 200
        failed_cache_size => 200
        failed_cache_ttl => 30
        max_retries => 1
      }

      if [user_ip] == [client_host] {
        mutate {
          remove_field => [ "client_host" ]
        }
      }

     # Parse out top level edu domains (xxx.school.edu => school.edu, yyy.school.edu => school.edu)
     grok {
       match => { "client_host" => "(?<edu_domain>[^\.]*\.edu)$" }
       tag_on_failure => ["_grokparsefailure"]
       tag_on_failure => ["client_host-13"]
     }
   }
  }
}

